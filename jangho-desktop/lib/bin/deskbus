#!/usr/bin/env python3
import sys
from gi.repository import GLib
import dbus
import dbus.service
from dbus.mainloop.glib import DBusGMainLoop

OPATH = '/io/jangho/deskbus'
IFACE = 'io.jangho.deskbus'
BUS_NAME = 'io.jangho.deskbus'

DBusGMainLoop(set_as_default=True)
BUS = dbus.SessionBus()

class Server(dbus.service.Object):
    def __init__(self):
        BUS.request_name(BUS_NAME)
        bus_name = dbus.service.BusName(BUS_NAME, bus=BUS)
        dbus.service.Object.__init__(self, bus_name, OPATH)

        self.dunst_ids = {}
        self.dunst_enabled = True
        self.idle_enabled = False

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='sx', out_signature='')
    def set_dunst_id(self, key, value):
        for k, v in list(self.dunst_ids.items()):
            if v == value:
                del self.dunst_ids[k]
        self.dunst_ids[key] = value

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='s', out_signature='bx')
    def get_dunst_id(self, key):
        if key in self.dunst_ids:
            return (True, self.dunst_ids[key])
        else:
            return (False, 0)

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='s', out_signature='')
    def clear_dunst_id(self, key):
        del self.dunst_ids[key]

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='', out_signature='ax')
    def clear_dunst_id_all(self):
        ids = list(self.dunst_ids.values())
        self.dunst_ids = {}
        return ids

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='', out_signature='b')
    def toggle_dunst_enabled(self):
        self.dunst_enabled = not self.dunst_enabled
        return self.dunst_enabled

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='b', out_signature='')
    def set_dunst_enabled(self, value):
        self.dunst_enabled = True if value else False

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='', out_signature='b')
    def toggle_idle_enabled(self):
        self.idle_enabled = not self.idle_enabled
        return self.idle_enabled

    @dbus.service.method(dbus_interface=IFACE,
                         in_signature='b', out_signature='')
    def set_idle_enabled(self, value):
        self.idle_enabled = True if value else False


def client():
    COMMAND = sys.argv[1]
    OBJ = BUS.get_object(BUS_NAME, OPATH)
    if COMMAND == 'set-dunst-id':
        OBJ.set_dunst_id(sys.argv[2], int(sys.argv[3]), dbus_interface=IFACE)
    elif COMMAND == 'get-dunst-id':
        result = OBJ.get_dunst_id(sys.argv[2], dbus_interface=IFACE)
        result[0] and print(result[1])
    elif COMMAND == 'clear-dunst-id':
        OBJ.clear_dunst_id(sys.argv[2], dbus_interface=IFACE)
    elif COMMAND == 'clear-dunst-id-all':
        for i in OBJ.clear_dunst_id_all(dbus_interface=IFACE):
            print(i)
    elif COMMAND == 'toggle-dunst-enabled':
        print(OBJ.toggle_dunst_enabled(dbus_interface=IFACE))
    elif COMMAND == 'set-dunst-enabled':
        OBJ.set_dunst_enabled(int(sys.argv[2]), dbus_interface=IFACE)
    elif COMMAND == 'toggle-idle-enabled':
        print(OBJ.toggle_idle_enabled(dbus_interface=IFACE))
    elif COMMAND == 'set-idle-enabled':
        OBJ.set_idle_enabled(int(sys.argv[2]), dbus_interface=IFACE)
    else:
        print('Unrecognized command', file=sys.stderr)
        sys.exit(1)


if __name__ == '__main__':
    if sys.argv[1] == 'server':
        SERVER = Server()
        LOOP = GLib.MainLoop()
        LOOP.run()
    else:
        client()
